# -*- coding: utf-8 -*-
"""Movie_Recommanded_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MxpuglP2kUoJPzxZle8uR7ZdyFftSfvY
"""

import pandas as pd
import numpy as np

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies.info()

credits.info()

credits['cast'].index[0]

"""# **Data Preprocessing**"""

movies = movies.merge(credits, on='title')

movies.head(2)

movies.info()

movies.shape

"""i keep few columns from this entire dataset to get the best output. and create a new dataset
columns:
genres, id, keywords, overview, title, cast, crew
"""

movies = movies[['movie_id', 'title', 'genres', 'keywords', 'cast', 'crew' , 'overview']]

movies.info()

"""check how many null value is here.
there has 3 null value in overview column
"""

movies.head(1)

movies.isnull().sum()

"""drop this row"""

movies.dropna(inplace=True)

"""check duplicates"""

movies.duplicated().sum()

# movies.iloc[0].genres
movies['genres'].iloc[0]  #uporer ta r eta, both are same

"""[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]

but we need [ 'Action', 'Adventure' , 'Fantasy' , 'Science Fiction' ] like this form
"""

# create a helper function to get this form
def convert(obj):
  l = []
  for i in obj:
    l.append(i['name'])
  return l

convert([{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}] ) # first and last a quote na dile thik thak chole

"""[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]
i have to create this string to list. so i use ast.literal_eval() from ast
"""

import ast
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')

"""**Convert** this [{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]    to [Action, Adventure, Fantasy, Science Fiction]"""

def convert1(obj):
  l = []
  for i in ast.literal_eval(obj):
    l.append(i['name'])
  return l

movies['genres'] = movies['genres'].apply(convert1)

movies['keywords'] = movies['keywords'].apply(convert1)

movies.head(4)

movies['cast'][0] # we can write like this movies['cast'].iloc[0]

"""now amra cast theke 1st 3 joner naam chai. real name"""

def convert2(obj):
  l = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      l.append(i['name'])
      counter+=1
    else:
      break
  return l

movies['cast'] = movies['cast'].apply(convert2)

"""now i just want director name from crew"""

def fetch_director(obj):
  l = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      l.append(i['name'])
      break
  return l

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head(4)

movies['overview'][0]

"""In the 22nd century, a paraplegic Marine is dispatched to the moon Pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization.
this is a string. i have to convert this as list
"""

movies['overview'] = movies['overview'].apply(lambda x: x.split()) # lambda x: x.split() .split() method kono string er prottek word k alada kore space er basis a . segulor ekta list baniye dey

"""remove space from word"""

movies['genres'] = movies['genres'].apply(lambda x : [ i.replace(" ", "") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x : [ i.replace(" ", "") for i in x])
movies['cast'] = movies['cast'].apply(lambda x : [ i.replace(" ", "") for i in x])
movies['crew'] = movies['crew'].apply(lambda x : [ i.replace(" ", "") for i in x])

movies.head( 4)

"""concate overviews, genres, cast, keywords and crew and put it on a new column calles tag"""

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head(4)

"""Now create a new Dataframe with necessery columns"""

new_df = movies[['movie_id', 'title', 'tags']]

new_df['tags'] = new_df['tags'].apply(lambda x: " ".join(x))

"""convert lowerCase"""

new_df['tags'] = new_df['tags'].apply(lambda x: x.lower())
new_df['title'] = new_df['title'].apply(lambda x: x.lower())

new_df['tags'][0]

new_df

"""here i use **BAG_OF_WORDS** represention. where each unique word in the dataset is assigned a count. so i use scikit learn tool. Count Vectorizer do this BAG_OF_WORDS. this is used in NLP"""

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

ps.stem("loved")

# stem is for converting a word its original form. as exmpl= loving become love or loved => love etc
def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  string = " ".join(y)
  return string

# check stem function
stem('in the 22nd century, a paraplegic marine is dispatched to the moon pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization. action adventure fantasy sciencefiction cultureclash future spacewar spacecolony society spacetravel futuristic romance space alien tribe alienplanet cgi marine soldier battle loveaffair antiwar powerrelations mindandsoul 3d samworthington zoesaldana sigourneyweaver jamescameron')

new_df['tags'] = new_df['tags'].apply(stem)

new_df.shape

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000 , stop_words = 'english')

vectors = cv.fit_transform(new_df['tags']).toarray() # fit for Learns the vocabulary (unique words) from new_df['tags'] and Transform() for Converts the text into a sparse matrix of token counts

vectors

cv.get_feature_names_out()

len(cv.get_feature_names_out())

from sklearn.metrics.pairwise import cosine_similarity

similar = cosine_similarity(vectors)

similar[0]

def recommend(movie):
  movie_index = new_df[new_df['title'] == movie].index[0]
  distances = similar[movie_index]
  movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x:x[1])[1:6]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)
  return

recommend('batman')

import pickle

# pickle.dump() use kore data k binary format kore website file a niye jawa jay
pickle.dump(new_df, open('movies.pkl', 'wb'))

pickle.dump(new_df.to_dict(), open('movies_list_dict', 'wb'))

pickle.dump(similar, open('similarity', 'wb'))